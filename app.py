import os

from flask import Flask, jsonify
from flask_smorest import Api
from flask_jwt_extended import JWTManager

from healthcare_finance_api.models.db import db
from blocklist import BLOCKLIST

from healthcare_finance_api.resources.patient import blp as PatientsBlueprint
from healthcare_finance_api.resources.phamacy import blp as PharmaciesBlueprint
from healthcare_finance_api.resources.transactions import blp as TransactionsBlueprint
from healthcare_finance_api.resources.user import blp as UsersBlueprint

ABSOLUTE_PATH = os.path.dirname(__file__)
DATABASE_PATH = os.path.join(
    ABSOLUTE_PATH, "healthcare_finance_api/database/HealthCareFinance.db"
)


def create_app():

    app = Flask(__name__)

    app.config["PROPAGATE_EXCEPTIONS"] = True
    app.config["API_TITLE"] = "REST API for a healthcare company"
    app.config["API_VERSION"] = "v1"
    app.config["OPENAPI_VERSION"] = "3.0.3"
    app.config["OPENAPI_URL_PREFIX"] = "/"
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv(
        "DATABASE_URL", f"sqlite:///{DATABASE_PATH}"
    )
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    db.init_app(app)

    api = Api(app)

    # Generated by secrets.SystemRandom().getrandbits(128)
    app.config["JWT_SECRET_KEY"] = "18179310603353847870991650577440422880"
    jwt = JWTManager(app)

    @jwt.token_in_blocklist_loader
    def check_if_token_in_blocklist(jwt_header, jwt_payload):
        return jwt_payload["jti"] in BLOCKLIST

    @jwt.revoked_token_loader
    def revoke_token_callback(jwt_header, jwt_payload):
        return (
            jsonify(
                {"description": "The token has been revoked.", "error": "token_revoked"}
            ),
            401,
        )

    @jwt.needs_fresh_token_loader
    def token_not_fresh_callback(jwt_header, jwt_payload):
        return jsonify(
            {"description": "The token is not fresh.", "error": "fresh_token_required"}
        )

    @jwt.expired_token_loader
    def expired_token_callback(jwt_header, jwt_payload):
        return (
            jsonify({"message": "The token has expired.", "error": "token_expired"}),
            401,
        )

    @jwt.invalid_token_loader
    def invalid_token_callback(error):
        return (
            jsonify(
                {"message": "Signature verification failed.", "error": "invalid_token."}
            ),
            401,
        )

    @jwt.unauthorized_loader
    def missing_token_callback(error):
        return (
            jsonify(
                {
                    "description": "Request does not contain an access token.",
                    "error": "authorization_required",
                }
            ),
            401,
        )

    api.register_blueprint(PatientsBlueprint)
    api.register_blueprint(PharmaciesBlueprint)
    api.register_blueprint(TransactionsBlueprint)
    api.register_blueprint(UsersBlueprint)

    return app


if __name__ == "__main__":
    app = create_app()
    app.run(debug=True)
